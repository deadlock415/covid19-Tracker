{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ARPIT\\\\Desktop\\\\React Js\\\\Covid-19-Dashboard\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport { MenuItem, FormControl, Select, Card, CardContent } from \"@material-ui/core\";\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport { sortData, prettyPrintStat } from './util';\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({\n    lat: 34.80746,\n    lng: -40.4796\n  });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all').then(response => response.json()).then(data => {\n      setCountryInfo(data);\n    });\n  }, []); //STATE = how to write a variable in react \n  //https://desease.sh/v3/covid-19/countries\n  //USEEFFECT  =  run a peace of code based on a given condition \n\n  useEffect(() => {\n    //async -> send a request a server ,wait for it \n    // do something with input\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\").then(response => response.json()).then(data => {\n        const countries = data.map(country => ({\n          name: country.country,\n          value: country.countryInfo.iso2 //UK,USA,FR\n\n        }));\n        const sortedData = sortData(data);\n        setTableData(sortedData);\n        setMapCountries(data);\n        setCountries(countries);\n      });\n    };\n\n    getCountriesData();\n  }, []); //if its [] then code inside here will run once\n  //when the component loads and not again \n  //When we change the drop down it will fetch the new data\n\n  const onCountryChange = async event => {\n    const countryCode = event.target.value;\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url).then(response => response.json()).then(data => {\n      setCountry(countryCode); //All of the data\n      //from the country response\n\n      setCountryInfo(data);\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4);\n    }); //world wide comes from different url\n    //https://disease.sh/v3/covid-19/all\n    //https://disease.sh/v3/covid-19/countries/[COUNTRY_CODE]\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app__left\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app__header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"COVID-19 TRACKER\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          className: \"app__dropdown\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            variant: \"outlined\",\n            value: country,\n            onChange: onCountryChange,\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"worldwide\",\n              children: \"WorldWide\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 7\n            }, this), countries.map(country => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: country.value,\n              children: country.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 8\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app__stats\",\n        children: [/*#__PURE__*/_jsxDEV(InfoBox, {\n          isRed: true,\n          active: casesType === \"cases\",\n          onClick: e => setCasesType('cases'),\n          title: \"Coronavirus cases\",\n          cases: prettyPrintStat(countryInfo.todayCases),\n          total: prettyPrintStat(countryInfo.cases)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoBox, {\n          active: casesType === \"recovered\",\n          onClick: e => setCasesType('recovered'),\n          title: \"Recovered\",\n          cases: prettyPrintStat(countryInfo.todayRecovered),\n          total: prettyPrintStat(countryInfo.recovered)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoBox, {\n          isRed: true,\n          active: casesType === \"deaths\",\n          onClick: e => setCasesType('deaths'),\n          title: \"Deaths\",\n          cases: prettyPrintStat(countryInfo.todayDeaths),\n          total: prettyPrintStat(countryInfo.deaths)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Map, {\n        casesType: casesType,\n        countries: mapCountries,\n        center: mapCenter,\n        zoom: mapZoom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      className: \"app__right\",\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Lives Cases by Country\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          countries: tableData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"app__graphTitle\",\n          children: [\"Worldwide new \", casesType]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(LineGraph, {\n          className: \"app__graph\",\n          casesType: casesType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"up9IMIVLHH/W2hEByhww7vgyOGI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/ARPIT/Desktop/React Js/Covid-19-Dashboard/src/App.js"],"names":["React","useState","useEffect","MenuItem","FormControl","Select","Card","CardContent","InfoBox","Map","Table","sortData","prettyPrintStat","LineGraph","App","countries","setCountries","country","setCountry","countryInfo","setCountryInfo","tableData","setTableData","mapCenter","setMapCenter","lat","lng","mapZoom","setMapZoom","mapCountries","setMapCountries","casesType","setCasesType","fetch","then","response","json","data","getCountriesData","map","name","value","iso2","sortedData","onCountryChange","event","countryCode","target","url","long","e","todayCases","cases","todayRecovered","recovered","todayDeaths","deaths"],"mappings":"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","sourcesContent":["\r\nimport './App.css';\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\nMenuItem,\r\nFormControl,\r\nSelect,\r\nCard,\r\nCardContent,\r\n}from \"@material-ui/core\"\r\nimport InfoBox from './InfoBox'\r\nimport Map from './Map'\r\nimport Table from './Table'\r\nimport { sortData, prettyPrintStat } from './util';\r\nimport LineGraph from './LineGraph';\r\nimport \"leaflet/dist/leaflet.css\"\r\n\r\nfunction App() {\r\n  const [countries,setCountries] = useState([])\r\n  const [country,setCountry] = useState('worldwide')\r\n  const [countryInfo,setCountryInfo] = useState({})\r\n  const [tableData,setTableData] = useState([])\r\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\r\n  const [mapZoom,setMapZoom] = useState(3)\r\n  const [mapCountries,setMapCountries] = useState([])\r\n  const [casesType,setCasesType] = useState(\"cases\")\r\n  useEffect(()=>{\r\n    fetch('https://disease.sh/v3/covid-19/all').then(response => response.json()).then(data =>{\r\n      setCountryInfo(data)\r\n    })\r\n  },[])\r\n  //STATE = how to write a variable in react \r\n\r\n  //https://desease.sh/v3/covid-19/countries\r\n  //USEEFFECT  =  run a peace of code based on a given condition \r\n  useEffect(()=>{\r\n    //async -> send a request a server ,wait for it \r\n    // do something with input\r\n    const getCountriesData = async () =>{\r\n      await fetch(\"https://disease.sh/v3/covid-19/countries\").then((response)=> response.json()).then((data)=>{\r\n        const countries = data.map((country)=>(\r\n          {\r\n            name:country.country,\r\n            value:country.countryInfo.iso2//UK,USA,FR\r\n            \r\n          }));\r\n          const sortedData = sortData(data)\r\n          \r\n          setTableData(sortedData);\r\n          setMapCountries(data)\r\n          setCountries(countries)\r\n      })\r\n    }\r\n    getCountriesData();\r\n  },[])//if its [] then code inside here will run once\r\n  //when the component loads and not again \r\n\r\n  //When we change the drop down it will fetch the new data\r\n  const onCountryChange =async  (event) =>{\r\n    const countryCode = event.target.value;\r\n    const url  = countryCode === 'worldwide' ?'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`\r\n    await fetch(url)\r\n    .then(response => response.json())\r\n    .then(data =>{\r\n      setCountry(countryCode)\r\n\r\n      //All of the data\r\n      //from the country response\r\n      setCountryInfo(data);\r\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\r\n      setMapZoom(4);\r\n    });\r\n\r\n    //world wide comes from different url\r\n    //https://disease.sh/v3/covid-19/all\r\n    //https://disease.sh/v3/covid-19/countries/[COUNTRY_CODE]\r\n\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <div className =\"app__left\">\r\n      <div className=\"app__header\">\r\n      <h1>COVID-19 TRACKER</h1>\r\n     <FormControl className=\"app__dropdown\">\r\n      <Select variant=\"outlined\" value={country}onChange = {onCountryChange}>\r\n      {/* loop through all the country and show drop down */}\r\n      <MenuItem value=\"worldwide\">WorldWide</MenuItem>\r\n     {countries.map((country)=>(\r\n       <MenuItem value = {country.value}>{country.name}</MenuItem>\r\n     ))}\r\n     \r\n        {/* <MenuItem value=\"wordwide\">WordWide</MenuItem>\r\n        <MenuItem value=\"wordwide\">opition</MenuItem>\r\n        <MenuItem value=\"wordwide\">otpoin</MenuItem>\r\n        <MenuItem value=\"wordwide\">adfadf</MenuItem> */}\r\n       \r\n      </Select>\r\n\r\n     </FormControl>\r\n\r\n    {/* Done */}\r\n     {/* Header */}\r\n      {/* Title and input dropdown filed */}\r\n\r\n      </div>\r\n        <div className = \"app__stats\">\r\n          <InfoBox \r\n          isRed\r\n          active={casesType === \"cases\"}\r\n          onClick={e =>setCasesType('cases')}\r\n          title = \"Coronavirus cases\" cases ={prettyPrintStat(countryInfo.todayCases)} total = {prettyPrintStat(countryInfo.cases)}/>\r\n          <InfoBox \r\n          active={casesType === \"recovered\"}\r\n          onClick= {e =>setCasesType('recovered')}\r\n          title = \"Recovered\" cases = {prettyPrintStat(countryInfo.todayRecovered)} total ={prettyPrintStat(countryInfo.recovered)}/>\r\n          <InfoBox\r\n          isRed\r\n          active={casesType === \"deaths\"}\r\n          onClick = {e => setCasesType('deaths')}\r\n          title = \"Deaths\" cases = {prettyPrintStat(countryInfo.todayDeaths)} total = {prettyPrintStat(countryInfo.deaths)}/>\r\n            {/*InfoBoxes*/}\r\n\r\n\r\n        </div>\r\n\r\n\r\n  \r\n       \r\n         {/*MAPS*/}\r\n         <Map \r\n         casesType = {casesType}\r\n         countries = {mapCountries}\r\n         center = {mapCenter}\r\n         zoom = {mapZoom}\r\n\r\n         />\r\n\r\n\r\n      </div>\r\n\r\n      <Card className = \"app__right\">\r\n        <CardContent>\r\n          <h3>Lives Cases by Country</h3>\r\n          <Table countries = {tableData} />\r\n        {/*Table*/}\r\n        <h3 className = \"app__graphTitle\">Worldwide new {casesType}</h3>\r\n        {/*GRPAH  */}\r\n        <LineGraph className =\"app__graph\" casesType = {casesType}/>\r\n\r\n        </CardContent>\r\n        \r\n    </Card>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}