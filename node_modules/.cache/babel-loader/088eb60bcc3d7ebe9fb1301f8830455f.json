{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/ARPIT/Desktop/React Js/Covid-19-Dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/ARPIT/Desktop/React Js/Covid-19-Dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/ARPIT/Desktop/React Js/Covid-19-Dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import'./App.css';import React,{useState,useEffect}from\"react\";import{MenuItem,FormControl,Select,Card,CardContent}from\"@material-ui/core\";import InfoBox from'./InfoBox';import Map from'./Map';import Table from'./Table';import{sortData,prettyPrintStat}from'./util';import LineGraph from'./LineGraph';import\"leaflet/dist/leaflet.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),countries=_useState2[0],setCountries=_useState2[1];var _useState3=useState('worldwide'),_useState4=_slicedToArray(_useState3,2),country=_useState4[0],setCountry=_useState4[1];var _useState5=useState({}),_useState6=_slicedToArray(_useState5,2),countryInfo=_useState6[0],setCountryInfo=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),tableData=_useState8[0],setTableData=_useState8[1];var _useState9=useState({lat:34.80746,lng:-40.4796}),_useState10=_slicedToArray(_useState9,2),mapCenter=_useState10[0],setMapCenter=_useState10[1];var _useState11=useState(3),_useState12=_slicedToArray(_useState11,2),mapZoom=_useState12[0],setMapZoom=_useState12[1];var _useState13=useState([]),_useState14=_slicedToArray(_useState13,2),mapCountries=_useState14[0],setMapCountries=_useState14[1];var _useState15=useState(\"cases\"),_useState16=_slicedToArray(_useState15,2),casesType=_useState16[0],setCasesType=_useState16[1];useEffect(function(){fetch('https://disease.sh/v3/covid-19/all').then(function(response){return response.json();}).then(function(data){setCountryInfo(data);});},[]);//STATE = how to write a variable in react \n//https://desease.sh/v3/covid-19/countries\n//USEEFFECT  =  run a peace of code based on a given condition \nuseEffect(function(){//async -> send a request a server ,wait for it \n// do something with input\nvar getCountriesData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"https://disease.sh/v3/covid-19/countries\").then(function(response){return response.json();}).then(function(data){var countries=data.map(function(country){return{name:country.country,value:country.countryInfo.iso2//UK,USA,FR\n};});var sortedData=sortData(data);setTableData(sortedData);setMapCountries(data);setCountries(countries);});case 2:case\"end\":return _context.stop();}}},_callee);}));return function getCountriesData(){return _ref.apply(this,arguments);};}();getCountriesData();},[]);//if its [] then code inside here will run once\n//when the component loads and not again \n//When we change the drop down it will fetch the new data\nvar onCountryChange=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event){var countryCode,url;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:countryCode=event.target.value;url=countryCode==='worldwide'?'https://disease.sh/v3/covid-19/all':\"https://disease.sh/v3/covid-19/countries/\".concat(countryCode);_context2.next=4;return fetch(url).then(function(response){return response.json();}).then(function(data){setCountry(countryCode);//All of the data\n//from the country response\n//All of the data\n//from the country response\nsetCountryInfo(data);setMapCenter([data.countryInfo.lat,data.countryInfo.long]);setMapZoom(4);});case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function onCountryChange(_x){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"app__left\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"app__header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"COVID-19 TRACKER\"}),/*#__PURE__*/_jsx(FormControl,{className:\"app__dropdown\",children:/*#__PURE__*/_jsxs(Select,{variant:\"outlined\",value:country,onChange:onCountryChange,children:[/*#__PURE__*/_jsx(MenuItem,{value:\"worldwide\",children:\"WorldWide\"}),countries.map(function(country){return/*#__PURE__*/_jsx(MenuItem,{value:country.value,children:country.name});})]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"app__stats\",children:[/*#__PURE__*/_jsx(InfoBox,{isRed:true,active:casesType===\"cases\",onClick:function onClick(e){return setCasesType('cases');},title:\"Coronavirus cases\",cases:prettyPrintStat(countryInfo.todayCases),total:prettyPrintStat(countryInfo.cases)}),/*#__PURE__*/_jsx(InfoBox,{active:casesType===\"recovered\",onClick:function onClick(e){return setCasesType('recovered');},title:\"Recovered\",cases:prettyPrintStat(countryInfo.todayRecovered),total:prettyPrintStat(countryInfo.recovered)}),/*#__PURE__*/_jsx(InfoBox,{isRed:true,active:casesType===\"deaths\",onClick:function onClick(e){return setCasesType('deaths');},title:\"Deaths\",cases:prettyPrintStat(countryInfo.todayDeaths),total:prettyPrintStat(countryInfo.deaths)})]}),/*#__PURE__*/_jsx(Map,{casesType:casesType,countries:mapCountries,center:mapCenter,zoom:mapZoom})]}),/*#__PURE__*/_jsx(Card,{className:\"app__right\",children:/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Lives Cases by Country\"}),/*#__PURE__*/_jsx(Table,{countries:tableData}),/*#__PURE__*/_jsxs(\"h3\",{className:\"app__graphTitle\",children:[\"Worldwide new \",casesType]}),/*#__PURE__*/_jsx(LineGraph,{className:\"app__graph\",casesType:casesType})]})})]});}export default App;","map":{"version":3,"sources":["C:/Users/ARPIT/Desktop/React Js/Covid-19-Dashboard/src/App.js"],"names":["React","useState","useEffect","MenuItem","FormControl","Select","Card","CardContent","InfoBox","Map","Table","sortData","prettyPrintStat","LineGraph","App","countries","setCountries","country","setCountry","countryInfo","setCountryInfo","tableData","setTableData","lat","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","casesType","setCasesType","fetch","then","response","json","data","getCountriesData","map","name","value","iso2","sortedData","onCountryChange","event","countryCode","target","url","long","e","todayCases","cases","todayRecovered","recovered","todayDeaths","deaths"],"mappings":"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","sourcesContent":["\r\nimport './App.css';\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\nMenuItem,\r\nFormControl,\r\nSelect,\r\nCard,\r\nCardContent,\r\n}from \"@material-ui/core\"\r\nimport InfoBox from './InfoBox'\r\nimport Map from './Map'\r\nimport Table from './Table'\r\nimport { sortData, prettyPrintStat } from './util';\r\nimport LineGraph from './LineGraph';\r\nimport \"leaflet/dist/leaflet.css\"\r\n\r\nfunction App() {\r\n  const [countries,setCountries] = useState([])\r\n  const [country,setCountry] = useState('worldwide')\r\n  const [countryInfo,setCountryInfo] = useState({})\r\n  const [tableData,setTableData] = useState([])\r\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\r\n  const [mapZoom,setMapZoom] = useState(3)\r\n  const [mapCountries,setMapCountries] = useState([])\r\n  const [casesType,setCasesType] = useState(\"cases\")\r\n  useEffect(()=>{\r\n    fetch('https://disease.sh/v3/covid-19/all').then(response => response.json()).then(data =>{\r\n      setCountryInfo(data)\r\n    })\r\n  },[])\r\n  //STATE = how to write a variable in react \r\n\r\n  //https://desease.sh/v3/covid-19/countries\r\n  //USEEFFECT  =  run a peace of code based on a given condition \r\n  useEffect(()=>{\r\n    //async -> send a request a server ,wait for it \r\n    // do something with input\r\n    const getCountriesData = async () =>{\r\n      await fetch(\"https://disease.sh/v3/covid-19/countries\").then((response)=> response.json()).then((data)=>{\r\n        const countries = data.map((country)=>(\r\n          {\r\n            name:country.country,\r\n            value:country.countryInfo.iso2//UK,USA,FR\r\n            \r\n          }));\r\n          const sortedData = sortData(data)\r\n          \r\n          setTableData(sortedData);\r\n          setMapCountries(data)\r\n          setCountries(countries)\r\n      })\r\n    }\r\n    getCountriesData();\r\n  },[])//if its [] then code inside here will run once\r\n  //when the component loads and not again \r\n\r\n  //When we change the drop down it will fetch the new data\r\n  const onCountryChange =async  (event) =>{\r\n    const countryCode = event.target.value;\r\n    const url  = countryCode === 'worldwide' ?'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`\r\n    await fetch(url)\r\n    .then(response => response.json())\r\n    .then(data =>{\r\n      setCountry(countryCode)\r\n\r\n      //All of the data\r\n      //from the country response\r\n      setCountryInfo(data);\r\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\r\n      setMapZoom(4);\r\n    });\r\n\r\n    //world wide comes from different url\r\n    //https://disease.sh/v3/covid-19/all\r\n    //https://disease.sh/v3/covid-19/countries/[COUNTRY_CODE]\r\n\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <div className =\"app__left\">\r\n      <div className=\"app__header\">\r\n      <h1>COVID-19 TRACKER</h1>\r\n     <FormControl className=\"app__dropdown\">\r\n      <Select variant=\"outlined\" value={country}onChange = {onCountryChange}>\r\n      {/* loop through all the country and show drop down */}\r\n      <MenuItem value=\"worldwide\">WorldWide</MenuItem>\r\n     {countries.map((country)=>(\r\n       <MenuItem value = {country.value}>{country.name}</MenuItem>\r\n     ))}\r\n     \r\n        {/* <MenuItem value=\"wordwide\">WordWide</MenuItem>\r\n        <MenuItem value=\"wordwide\">opition</MenuItem>\r\n        <MenuItem value=\"wordwide\">otpoin</MenuItem>\r\n        <MenuItem value=\"wordwide\">adfadf</MenuItem> */}\r\n       \r\n      </Select>\r\n\r\n     </FormControl>\r\n\r\n    {/* Done */}\r\n     {/* Header */}\r\n      {/* Title and input dropdown filed */}\r\n\r\n      </div>\r\n        <div className = \"app__stats\">\r\n          <InfoBox \r\n          isRed\r\n          active={casesType === \"cases\"}\r\n          onClick={e =>setCasesType('cases')}\r\n          title = \"Coronavirus cases\" cases ={prettyPrintStat(countryInfo.todayCases)} total = {prettyPrintStat(countryInfo.cases)}/>\r\n          <InfoBox \r\n          active={casesType === \"recovered\"}\r\n          onClick= {e =>setCasesType('recovered')}\r\n          title = \"Recovered\" cases = {prettyPrintStat(countryInfo.todayRecovered)} total ={prettyPrintStat(countryInfo.recovered)}/>\r\n          <InfoBox\r\n          isRed\r\n          active={casesType === \"deaths\"}\r\n          onClick = {e => setCasesType('deaths')}\r\n          title = \"Deaths\" cases = {prettyPrintStat(countryInfo.todayDeaths)} total = {prettyPrintStat(countryInfo.deaths)}/>\r\n            {/*InfoBoxes*/}\r\n\r\n\r\n        </div>\r\n\r\n\r\n  \r\n       \r\n         {/*MAPS*/}\r\n         <Map \r\n         casesType = {casesType}\r\n         countries = {mapCountries}\r\n         center = {mapCenter}\r\n         zoom = {mapZoom}\r\n\r\n         />\r\n\r\n\r\n      </div>\r\n\r\n      <Card className = \"app__right\">\r\n        <CardContent>\r\n          <h3>Lives Cases by Country</h3>\r\n          <Table countries = {tableData} />\r\n        {/*Table*/}\r\n        <h3 className = \"app__graphTitle\">Worldwide new {casesType}</h3>\r\n        {/*GRPAH  */}\r\n        <LineGraph className =\"app__graph\" casesType = {casesType}/>\r\n\r\n        </CardContent>\r\n        \r\n    </Card>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}