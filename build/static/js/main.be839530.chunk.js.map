{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","index.js"],"names":["InfoBox","title","isRed","cases","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","prettyPrintStat","stat","numeral","format","sortData","data","sort","a","b","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fileOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be839530.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Card,CardContent,Typography} from \"@material-ui/core\";\r\nimport \"./InfoBox.css\"\r\nfunction InfoBox({title,isRed,cases,active,total,...props}) {\r\n    return (\r\n        <Card \r\n        onClick = {props.onClick}\r\n        className={`infoBox ${active && 'infoBox--selected' } ${isRed && 'infoBox--red'}`}>\r\n            <CardContent>\r\n                {/* Title corona virus cases*/}\r\n                <Typography className=\"infoBox__title\" color = \"textSecondary\">\r\n                    {title}\r\n                </Typography>\r\n                  {/* 120kNumber of cases */}\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__bases--green\"}`}>{cases}</h2>\r\n              \r\n                {/*  1.2M Totel*/}\r\n                <Typography color =\"textSecondary\" className=\"infoBox__total\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import {Circle, Popup} from \"react-leaflet\";\r\nimport React from \"react\"\r\nimport numeral from \"numeral\";\r\n\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n      hex: \"#CC1034\",\r\n      multiplier: 800,\r\n    },\r\n    recovered: {\r\n      hex: \"#7dd71d\",\r\n      multiplier: 1200,\r\n    },\r\n    deaths: {\r\n      hex: \"#fb4443\",\r\n      multiplier: 2000,\r\n    },\r\n  };\r\n\r\n  export const prettyPrintStat = (stat) =>\r\nstat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n\r\nexport const sortData = (data) =>{\r\n    const sortData = [...data];\r\n\r\n    sortData.sort((a,b)=>{\r\n        if(a.cases > b.cases){\r\n            return -1;\r\n\r\n        }else{\r\n            return 1;\r\n        }\r\n    })\r\n    return sortData;\r\n}\r\n//Draw circle on the map with interactive tooltop\r\nexport const showDataOnMap = (data,casesType = 'cases') =>(\r\n    data.map(country =>(\r\n        <Circle \r\n        center = {[country.countryInfo.lat, country.countryInfo.long]}\r\n        fileOpacity = {0.4}\r\n        color={casesTypeColors[casesType].hex}\r\n        fillColor={casesTypeColors[casesType].hex}\r\n        radius={\r\n            Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n          }\r\n        >\r\n        <Popup>\r\n            <div className=\"info-container\">\r\n                <div className=\"info-flag\"\r\n                style={{backgroundImage: `url(${country.countryInfo.flag})`}}\r\n                 />\r\n                <div className = \"info-name\"\r\n                \r\n                >{country.country}</div>\r\n                <div className = \"info-confirmed\">Cases:{numeral(country.cases).format(\"0,0\")}</div>\r\n                <div className = \"info-recovered\">Recovered:{numeral(country.recovered).format(\"0,0\")}</div>\r\n                <div className = \"info-deaths\">Deaths:{numeral(country.deaths).format(\"0,0\")}</div>\r\n            </div>\r\n        </Popup>\r\n        </Circle>\r\n    ))\r\n)","import React from 'react'\r\nimport {Map as LeafletMap, TileLayer} from \"react-leaflet\"\r\nimport \"./Map.css\"\r\nimport {showDataOnMap} from \"./util\"\r\nfunction Map({countries,casesType,center,zoom}) {\r\n    return (\r\n        <div className = \"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n\r\n\r\n            {/* Loop through all the country and draw circle on the screen */}\r\n            {showDataOnMap(countries,casesType)}\r\n            </LeafletMap>\r\n\r\n\r\n                    </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","  \r\nimport React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map((country) => (\r\n        <tr>\r\n          <td>{country.country}</td>\r\n          <td>\r\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType =\"cases\", ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;","\r\nimport './App.css';\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\nMenuItem,\r\nFormControl,\r\nSelect,\r\nCard,\r\nCardContent,\r\n}from \"@material-ui/core\"\r\nimport InfoBox from './InfoBox'\r\nimport Map from './Map'\r\nimport Table from './Table'\r\nimport { sortData, prettyPrintStat } from './util';\r\nimport LineGraph from './LineGraph';\r\nimport \"leaflet/dist/leaflet.css\"\r\n\r\nfunction App() {\r\n  const [countries,setCountries] = useState([])\r\n  const [country,setCountry] = useState('worldwide')\r\n  const [countryInfo,setCountryInfo] = useState({})\r\n  const [tableData,setTableData] = useState([])\r\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\r\n  const [mapZoom,setMapZoom] = useState(3)\r\n  const [mapCountries,setMapCountries] = useState([])\r\n  const [casesType,setCasesType] = useState(\"cases\")\r\n  useEffect(()=>{\r\n    fetch('https://disease.sh/v3/covid-19/all').then(response => response.json()).then(data =>{\r\n      setCountryInfo(data)\r\n    })\r\n  },[])\r\n  //STATE = how to write a variable in react \r\n\r\n  //https://desease.sh/v3/covid-19/countries\r\n  //USEEFFECT  =  run a peace of code based on a given condition \r\n  useEffect(()=>{\r\n    //async -> send a request a server ,wait for it \r\n    // do something with input\r\n    const getCountriesData = async () =>{\r\n      await fetch(\"https://disease.sh/v3/covid-19/countries\").then((response)=> response.json()).then((data)=>{\r\n        const countries = data.map((country)=>(\r\n          {\r\n            name:country.country,\r\n            value:country.countryInfo.iso2//UK,USA,FR\r\n            \r\n          }));\r\n          const sortedData = sortData(data)\r\n          \r\n          setTableData(sortedData);\r\n          setMapCountries(data)\r\n          setCountries(countries)\r\n      })\r\n    }\r\n    getCountriesData();\r\n  },[])//if its [] then code inside here will run once\r\n  //when the component loads and not again \r\n\r\n  //When we change the drop down it will fetch the new data\r\n  const onCountryChange =async  (event) =>{\r\n    const countryCode = event.target.value;\r\n    const url  = countryCode === 'worldwide' ?'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`\r\n    await fetch(url)\r\n    .then(response => response.json())\r\n    .then(data =>{\r\n      setCountry(countryCode)\r\n\r\n      //All of the data\r\n      //from the country response\r\n      setCountryInfo(data);\r\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\r\n      setMapZoom(4);\r\n    });\r\n\r\n    //world wide comes from different url\r\n    //https://disease.sh/v3/covid-19/all\r\n    //https://disease.sh/v3/covid-19/countries/[COUNTRY_CODE]\r\n\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <div className =\"app__left\">\r\n      <div className=\"app__header\">\r\n      <h1>COVID-19 TRACKER</h1>\r\n     <FormControl className=\"app__dropdown\">\r\n      <Select variant=\"outlined\" value={country}onChange = {onCountryChange}>\r\n      {/* loop through all the country and show drop down */}\r\n      <MenuItem value=\"worldwide\">WorldWide</MenuItem>\r\n     {countries.map((country)=>(\r\n       <MenuItem value = {country.value}>{country.name}</MenuItem>\r\n     ))}\r\n     \r\n        {/* <MenuItem value=\"wordwide\">WordWide</MenuItem>\r\n        <MenuItem value=\"wordwide\">opition</MenuItem>\r\n        <MenuItem value=\"wordwide\">otpoin</MenuItem>\r\n        <MenuItem value=\"wordwide\">adfadf</MenuItem> */}\r\n       \r\n      </Select>\r\n\r\n     </FormControl>\r\n\r\n    {/* Done */}\r\n     {/* Header */}\r\n      {/* Title and input dropdown filed */}\r\n\r\n      </div>\r\n        <div className = \"app__stats\">\r\n          <InfoBox \r\n          isRed\r\n          active={casesType === \"cases\"}\r\n          onClick={e =>setCasesType('cases')}\r\n          title = \"Coronavirus cases\" cases ={prettyPrintStat(countryInfo.todayCases)} total = {prettyPrintStat(countryInfo.cases)}/>\r\n          <InfoBox \r\n          active={casesType === \"recovered\"}\r\n          onClick= {e =>setCasesType('recovered')}\r\n          title = \"Recovered\" cases = {prettyPrintStat(countryInfo.todayRecovered)} total ={prettyPrintStat(countryInfo.recovered)}/>\r\n          <InfoBox\r\n          isRed\r\n          active={casesType === \"deaths\"}\r\n          onClick = {e => setCasesType('deaths')}\r\n          title = \"Deaths\" cases = {prettyPrintStat(countryInfo.todayDeaths)} total = {prettyPrintStat(countryInfo.deaths)}/>\r\n            {/*InfoBoxes*/}\r\n\r\n\r\n        </div>\r\n\r\n\r\n  \r\n       \r\n         {/*MAPS*/}\r\n         <Map \r\n         casesType = {casesType}\r\n         countries = {mapCountries}\r\n         center = {mapCenter}\r\n         zoom = {mapZoom}\r\n\r\n         />\r\n\r\n\r\n      </div>\r\n\r\n      <Card className = \"app__right\">\r\n        <CardContent>\r\n          <h3>Lives Cases by Country</h3>\r\n          <Table countries = {tableData} />\r\n        {/*Table*/}\r\n        <h3 className = \"app__graphTitle\">Worldwide new {casesType}</h3>\r\n        {/*GRPAH  */}\r\n        <LineGraph className =\"app__graph\" casesType = {casesType}/>\r\n\r\n        </CardContent>\r\n        \r\n    </Card>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n//help to render code on server side as faster as possible\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}