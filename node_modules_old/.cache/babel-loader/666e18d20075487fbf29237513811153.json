{"ast":null,"code":"var _jsxFileName = \"/Users/amanshukla/Desktop/Covid19React/covid19-tracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport { MenuItem, FormControl, Select, Card, CardContent } from \"@material-ui/core\";\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport { sortData } from './util';\nimport LineGraph from './LineGraph';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all').then(response => response.json()).then(data => {\n      setCountryInfo(data);\n    });\n  }, []); //STATE = how to write a variable in react \n  //https://desease.sh/v3/covid-19/countries\n  //USEEFFECT  =  run a peace of code based on a given condition \n\n  useEffect(() => {\n    //async -> send a request a server ,wait for it \n    // do something with input\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\").then(response => response.json()).then(data => {\n        const countries = data.map(country => ({\n          name: country.country,\n          value: country.countryInfo.iso2 //UK,USA,FR\n\n        }));\n        const sortedData = sortData(data);\n        setTableData(sortedData);\n        setCountries(countries);\n      });\n    };\n\n    getCountriesData();\n  }, []); //if its [] then code inside here will run once\n  //when the component loads and not again \n  //When we change the drop down it will fetch the new data\n\n  const onCountryChange = async event => {\n    const countryCode = event.target.value;\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url).then(response => response.json()).then(data => {\n      setCountry(countryCode); //All of the data\n      //from the country response\n\n      setCountryInfo(data);\n    }); //world wide comes from different url\n    //https://disease.sh/v3/covid-19/all\n    //https://disease.sh/v3/covid-19/countries/[COUNTRY_CODE]\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app__left\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app__header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"COVID-19 TRACKER\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          className: \"app__dropdown\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            variant: \"outlined\",\n            value: country,\n            onChange: onCountryChange,\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"worldwide\",\n              children: \"WorldWide\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 7\n            }, this), countries.map(country => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: country.value,\n              children: country.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 8\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app__stats\",\n        children: [/*#__PURE__*/_jsxDEV(InfoBox, {\n          title: \"Coronavirus cases\",\n          cases: countryInfo.todayCases,\n          total: countryInfo.cases\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoBox, {\n          title: \"Recovered\",\n          cases: countryInfo.todayRecovered,\n          total: countryInfo.recovered\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoBox, {\n          title: \"Deaths\",\n          cases: countryInfo.todayDeaths,\n          total: countryInfo.deaths\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Map, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      className: \"app__right\",\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Lives Cases by Country\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          countries: tableData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Worldwide new cases\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(LineGraph, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"1tOSJfp3mt7HwJBE+hyCYPhyx1c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/amanshukla/Desktop/Covid19React/covid19-tracker/src/App.js"],"names":["React","useState","useEffect","MenuItem","FormControl","Select","Card","CardContent","InfoBox","Map","Table","sortData","LineGraph","App","countries","setCountries","country","setCountry","countryInfo","setCountryInfo","tableData","setTableData","fetch","then","response","json","data","getCountriesData","map","name","value","iso2","sortedData","onCountryChange","event","countryCode","target","url","todayCases","cases","todayRecovered","recovered","todayDeaths","deaths"],"mappings":"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","sourcesContent":["\nimport './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport {\nMenuItem,\nFormControl,\nSelect,\nCard,\nCardContent,\n}from \"@material-ui/core\"\nimport InfoBox from './InfoBox'\nimport Map from './Map'\nimport Table from './Table'\nimport { sortData } from './util';\nimport LineGraph from './LineGraph';\n\n\nfunction App() {\n  const [countries,setCountries] = useState([])\n  const [country,setCountry] = useState('worldwide')\n  const [countryInfo,setCountryInfo] = useState({})\n  const [tableData,setTableData] = useState([])\n\n\n  useEffect(()=>{\n    fetch('https://disease.sh/v3/covid-19/all').then(response => response.json()).then(data =>{\n      setCountryInfo(data)\n    })\n  },[])\n  //STATE = how to write a variable in react \n\n  //https://desease.sh/v3/covid-19/countries\n  //USEEFFECT  =  run a peace of code based on a given condition \n  useEffect(()=>{\n    //async -> send a request a server ,wait for it \n    // do something with input\n    const getCountriesData = async () =>{\n      await fetch(\"https://disease.sh/v3/covid-19/countries\").then((response)=> response.json()).then((data)=>{\n        const countries = data.map((country)=>(\n          {\n            name:country.country,\n            value:country.countryInfo.iso2//UK,USA,FR\n            \n          }));\n          const sortedData = sortData(data)\n          \n          setTableData(sortedData);\n          setCountries(countries)\n      })\n    }\n    getCountriesData();\n  },[])//if its [] then code inside here will run once\n  //when the component loads and not again \n\n  //When we change the drop down it will fetch the new data\n  const onCountryChange =async  (event) =>{\n    const countryCode = event.target.value;\n    const url  = countryCode === 'worldwide' ?'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n    await fetch(url)\n    .then(response => response.json())\n    .then(data =>{\n      setCountry(countryCode)\n\n      //All of the data\n      //from the country response\n      setCountryInfo(data);\n    });\n\n    //world wide comes from different url\n    //https://disease.sh/v3/covid-19/all\n    //https://disease.sh/v3/covid-19/countries/[COUNTRY_CODE]\n\n  }\n  return (\n    <div className=\"App\">\n      <div className =\"app__left\">\n      <div className=\"app__header\">\n      <h1>COVID-19 TRACKER</h1>\n     <FormControl className=\"app__dropdown\">\n      <Select variant=\"outlined\" value={country}onChange = {onCountryChange}>\n      {/* loop through all the country and show drop down */}\n      <MenuItem value=\"worldwide\">WorldWide</MenuItem>\n     {countries.map((country)=>(\n       <MenuItem value = {country.value}>{country.name}</MenuItem>\n     ))}\n     \n        {/* <MenuItem value=\"wordwide\">WordWide</MenuItem>\n        <MenuItem value=\"wordwide\">opition</MenuItem>\n        <MenuItem value=\"wordwide\">otpoin</MenuItem>\n        <MenuItem value=\"wordwide\">adfadf</MenuItem> */}\n       \n      </Select>\n\n     </FormControl>\n\n    {/* Done */}\n     {/* Header */}\n      {/* Title and input dropdown filed */}\n\n      </div>\n        <div className = \"app__stats\">\n          <InfoBox title = \"Coronavirus cases\" cases ={countryInfo.todayCases} total = {countryInfo.cases}/>\n          <InfoBox title = \"Recovered\" cases = {countryInfo.todayRecovered} total ={countryInfo.recovered}/>\n          <InfoBox title = \"Deaths\" cases = {countryInfo.todayDeaths} total = {countryInfo.deaths}/>\n            {/*InfoBoxes*/}\n\n\n        </div>\n\n\n  \n       \n         {/*MAPS*/}\n         <Map />\n\n\n      </div>\n\n      <Card className = \"app__right\">\n        <CardContent>\n          <h3>Lives Cases by Country</h3>\n          <Table countries = {tableData} />\n        {/*Table*/}\n        <h3>Worldwide new cases</h3>\n        {/*GRPAH  */}\n        <LineGraph />\n\n        </CardContent>\n        \n    </Card>\n    </div>\n    \n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}